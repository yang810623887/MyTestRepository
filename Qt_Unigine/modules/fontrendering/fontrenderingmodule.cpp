/*********************************************************************************
 *
 * Inviwo - Interactive Visualization Workshop
 *
 * Copyright (c) 2013-2017 Inviwo Foundation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 *********************************************************************************/

#include <modules/fontrendering/fontrenderingmodule.h>
#include <modules/opengl/shader/shadermanager.h>
#include <modules/fontrendering/processors/textoverlaygl.h>
#include <modules/fontrendering/properties/fontproperty.h>

// Autogenerated
#include <modules/fontrendering/shader_resources.h>

namespace inviwo {

FontRenderingModule::FontRenderingModule(InviwoApplication* app) : InviwoModule(app, "FontRendering") {
    fontrendering::addShaderResources(ShaderManager::getPtr(), {getPath(ModulePath::GLSL)});
    registerProcessor<TextOverlayGL>();

    registerProperty<FontProperty>();
}

int FontRenderingModule::getVersion() const {
    return 2;
}

std::unique_ptr<VersionConverter> FontRenderingModule::getConverter(int version) const {
        return util::make_unique<Converter>(version);
}

FontRenderingModule::Converter::Converter(int version) : version_(version) {}

bool FontRenderingModule::Converter::convert(TxElement* root) {
    const std::vector<xml::IdentifierReplacement> repl = {
           // TextOverlayGL
            {{xml::Kind::processor("org.inviwo.TextOverlayGL"),
              xml::Kind::property("org.inviwo.OptionPropertyInt")},
             "Font size",
             "fontSize"}
    };
    const std::vector<xml::IdentifierReplacement> repl2 = {
        // TextOverlayGL
        { { xml::Kind::processor("org.inviwo.TextOverlayGL"),
        xml::Kind::property("org.inviwo.FloatVec2Property") },
        "Position",
        "position" }, 
        { { xml::Kind::processor("org.inviwo.TextOverlayGL"),
        xml::Kind::property("org.inviwo.FloatVec2Property") },
        "Anchor",
        "anchor" },
        { { xml::Kind::processor("org.inviwo.TextOverlayGL"),
        xml::Kind::property("org.inviwo.FloatVec4Property") },
        "color_",
        "color" },
        { { xml::Kind::processor("org.inviwo.TextOverlayGL"),
        xml::Kind::property("org.inviwo.StringProperty") },
        "Text",
        "text" }
    };

    bool res = false;
    switch (version_) {
        case 0: {
            res |= xml::changeIdentifiers(root, repl);
        }
        case 1: {
            res |= xml::changeIdentifiers(root, repl2);
            return res;
        }
        default:
            return false;  // No changes
    }
    return true;
}

} // namespace
